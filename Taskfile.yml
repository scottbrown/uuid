version: 3

vars:
  REPO: github.com/scottbrown/uuid
  BUILD_DIR: .build
  DIST_DIR: .dist
  TEST_DIR: .test
  BINARY_NAME: uuid
  VERSION:
    sh: |
      if [ -n "$GITHUB_REF" ] && [[ "$GITHUB_REF" == refs/tags/* ]]; then
        echo "${GITHUB_REF#refs/tags/}"
      else
        git rev-parse --abbrev-ref HEAD || echo "main"
      fi
  BUILD:
    sh: git rev-parse --short HEAD || echo "unknown"
  BUILD_FLAGS: "-X {{.REPO}}/cmd.version={{.VERSION}} -X {{.REPO}}/cmd.build={{.BUILD}}"

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task --list

  clean:
    desc: Clean build artifacts
    run: once
    cmds:
      - rm -rf {{.BUILD_DIR}} {{.DIST_DIR}} {{.TEST_DIR}}

  setup:
    desc: Create necessary directories
    run: once
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - mkdir -p {{.DIST_DIR}}
      - mkdir -p {{.TEST_DIR}}

  fmt:
    desc: Format Go code
    run: once
    cmds:
      - go fmt ./...

  check:
    desc: "Run all security scans"
    deps: [ sast, vet, vuln ]

  sast:
    desc: "Scans for code vulns"
    cmds:
      - gosec ./...

  vet:
    desc: Lint Go code
    cmds:
      - go vet ./...

  vuln:
    desc: "Scans for 3rd party lib vulns"
    cmds:
      - govulncheck ./...

  build:
    desc: Build the CLI application
    deps: [setup, fmt]
    cmds:
      - go build -ldflags "{{.BUILD_FLAGS}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.REPO}}
    sources:
      - '**/*.go'
    generates:
      - '{{.BUILD_DIR}}/{{.BINARY_NAME}}'

  test:
    desc: Run tests
    deps: [setup]
    cmds:
      - go test -v ./... -outputdir={{.TEST_DIR}}

  coverage:
    desc: Generate test coverage report
    deps: [setup]
    cmds:
      - go test -coverprofile={{.COVERAGE_FILE}} ./...
      - go tool cover -html={{.COVERAGE_FILE}} -o {{.COVERAGE_HTML}}
      - go tool cover -func={{.COVERAGE_FILE}}
      - echo "Coverage report generated at {{.COVERAGE_HTML}}"
    vars:
      COVERAGE_FILE: "{{.TEST_DIR}}/coverage.out"
      COVERAGE_HTML: "{{.TEST_DIR}}/coverage.html"

  release:
    desc: Build release artifacts for multiple platforms
    cmds:
      - task: clean
      - task: setup
      - task: release-darwin
      - task: release-linux
      - task: release-windows

  release-darwin:
    cmds: [task: release-darwin-amd64, task: release-darwin-arm64]
  release-linux:
    cmds: [task: release-linux-amd64, task: release-linux-arm64]
  release-windows:
    cmds: [task: release-windows-amd64, task: release-windows-arm64]

  build-core:
    internal: true
    vars:
      FLAGS: "-ldflags '{{.BUILD_FLAGS}}'"
    env:
      GOOS: "{{.GOOS}}"
      GOARCH: "{{.GOARCH}}"
    cmds:
      - go build {{.FLAGS}} -o {{.BUILD_DIR}}/{{.GOOS}}-{{.GOARCH}}/{{.BINARY_NAME}}{{.FILE_EXT}} {{.REPO}}/cmd

  build-darwin-amd64:
    deps:
      - task: build-core
        vars: { GOOS: darwin, GOARCH: amd64 }

  build-darwin-arm64:
    deps:
      - task: build-core
        vars: { GOOS: darwin, GOARCH: arm64 }

  build-linux-amd64:
    deps:
      - task: build-core
        vars: { GOOS: linux, GOARCH: amd64 }

  build-linux-arm64:
    deps:
      - task: build-core
        vars: { GOOS: linux, GOARCH: arm64 }

  build-windows-amd64:
    deps:
      - task: build-core
        vars: { GOOS: windows, GOARCH: amd64, FILE_EXT: ".exe" }

  build-windows-arm64:
    deps:
      - task: build-core
        vars: { GOOS: windows, GOARCH: arm64, FILE_EXT: ".exe" }

  build-all:
    deps:
      - build-darwin-amd64
      - build-darwin-arm64
      - build-linux-amd64
      - build-linux-arm64
      - build-windows-amd64
      - build-windows-arm64

  release-core:
    internal: true
    env:
      GOOS: linux
      GOARCH: amd64
    cmds:
      - tar -czf {{.DIST_DIR}}/{{.BINARY_NAME}}-{{.VERSION}}-{{.GOOS}}-{{.GOARCH}}.tar.gz -C {{.BUILD_DIR}}/{{.GOOS}}-{{.GOARCH}} {{.BINARY_NAME}}{{.FILE_EXT}}

  release-linux-amd64:
    cmds:
      - task: build-linux-amd64
      - task: release-core
        vars: { GOOS: linux, GOARCH: amd64 }
      
  release-linux-arm64:
    cmds:
      - task: build-linux-arm64
      - task: release-core
        vars: { GOOS: linux, GOARCH: arm64 }
      
  release-windows-amd64:
    cmds:
      - task: build-windows-amd64
      - task: release-core
        vars: { GOOS: windows, GOARCH: amd64, FILE_EXT: ".exe" }
      
  release-windows-arm64:
    cmds:
      - task: build-windows-arm64
      - task: release-core
        vars: { GOOS: windows, GOARCH: arm64, FILE_EXT: ".exe" }
      
  release-darwin-amd64:
    cmds:
      - task: build-darwin-amd64
      - task: release-core
        vars: { GOOS: darwin, GOARCH: amd64 }
      
  release-darwin-arm64:
    cmds:
      - task: build-darwin-arm64
      - task: release-core
        vars: { GOOS: darwin, GOARCH: arm64 }

  all:
    desc: Run all tasks (clean, build, test, coverage)
    cmds:
      - task: clean
      - task: build
      - task: test
      - task: coverage
